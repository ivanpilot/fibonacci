# In this project, the nginx act as an API Gateway where browser will only reach the nginx server and nginx server will reroute the request to the appropriate service which in our case is either the react app or the express app.
# to do so, we are writing the below script for nginx to know what to do
# finally, re-routing every request to other servers (react or express) - these other servers are called upstream

#the below syntax means the following:
# 'there is an upstream that we called client
# 'it is located at client:3000
# we use the word client because this is how we call this service in our docker-compose file

upstream client {
    server client:3000;
}

# the below syntax might work (not sure nginx would accept though as the word server might be a reserved word) but it would be very confusing 
# so DO NOT HAVE a server service in your docker-compose file as it will force you to write the below, instead call it api for instance
# upstream server {
#     server server:5000;
# }

upstream api {
    server api:5000;
}

# below are the rest of the instruction for nginx

server {
    listen 80; #this is the port inside the container

    location / {
        proxy_pass http://client;
    }

    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}
